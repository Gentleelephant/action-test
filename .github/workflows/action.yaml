#
# Copyright (C) 2022 Ing <https://github.com/wjz304>
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#


name: Custom Redpill
on:
  issues:
    types: [opened, reopened]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.1.2

      - name: Set up Python 3
        uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - name: Checkout
        uses: actions/checkout@main

      - name: Init Env
        run : |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          sudo timedatectl set-timezone "Asia/Shanghai"

          python -m pip install --upgrade pip setuptools

      - name: Get Issues Info
        if: github.event_name == 'issues'
        id: get-issues
        uses: actions/github-script@v6
        with:
          script: |
            var issuenumber = ${{ toJSON(github.event.issue.number) }};
            var issueauth = ${{ toJSON(github.event.issue.user.login) }};
            var issuetitle = ${{ toJSON(github.event.issue.title) }};
            var issuebody = ${{ toJSON(github.event.issue.body) }};

#            var regex = /\`\`\`([\s\S]*?)\`\`\`/g;
#            let options = issuebody.match(regex);

#            // '<???>': 替换一次; '/<???>/g': 替换全局; '/<???>/gi': 替换全局并忽略大小写;
#            issuetitle = issuetitle.replace(/\u000A/g, "");  // \n 换行符
#            issuetitle = issuetitle.replace(/\u000D/g, "");  // \r 回车
#
#            issuebody = issuebody.replace(/\u0008/g, "");  // \b Backspace
#            issuebody = issuebody.replace(/\u0009/g, "");  // \t Tab
#            issuebody = issuebody.replace(/\u000A/g, "");  // \n 换行符
#            issuebody = issuebody.replace(/\u000B/g, "");  // \v 垂直制表符
#            issuebody = issuebody.replace(/\u000C/g, "");  // \f 换页
#            issuebody = issuebody.replace(/\u000D/g, "");  // \r 回车
#            //issuebody = issuebody.replace(/\u0022/g, "");  // \" 双引号 (")
#            //issuebody = issuebody.replace(/\u0027/g, "");  // \' 单引号 (')
#            //issuebody = issuebody.replace(/\u005C/g, "");  // \\ 反斜杠 (\)
#            issuebody = issuebody.replace(/\u00A0/g, "");  //    不间断空格
#            issuebody = issuebody.replace(/\u2028/g, "");  //    行分隔符
#            issuebody = issuebody.replace(/\u2029/g, "");  //    段落分隔符
#            issuebody = issuebody.replace(/\uFEFF/g, "");  //    字节顺序标记

#            // 容错
#            issuebody = issuebody.replace(/：/g, ": ");
#            issuebody = issuebody.replace(/，/g, ", ");
#            issuebody = issuebody.replace(/“/g, "\"");
#            issuebody = issuebody.replace(/”/g, "\"");

            core.setOutput("issuenumber", JSON.stringify(issuenumber));
            core.setOutput("issueauth", JSON.stringify(issueauth));
            core.setOutput("issuetitle", JSON.stringify(issuetitle));
            core.setOutput("issuebody", JSON.stringify(issuebody));

      - name: Set Issues Info
        if: github.event_name == 'issues' && success()
        run: |
          echo issuenumber: "${{ steps.get-issues.outputs.issuenumber }}"
          echo issueauth:   "${{ steps.get-issues.outputs.issueauth }}"
          echo issuetitle:  "${{ steps.get-issues.outputs.issuetitle }}"
          echo issuebody:   "${{ steps.get-issues.outputs.issuebody }}"

          echo "issuenumber="${{ steps.get-issues.outputs.issuenumber }}"" >> $GITHUB_ENV
          echo "issueauth="${{ steps.get-issues.outputs.issueauth }}"" >> $GITHUB_ENV
          echo "issuetitle="${{ steps.get-issues.outputs.issuetitle }}"" >> $GITHUB_ENV
          echo "issuebody="${{ steps.get-issues.outputs.issuebody }}"" >> $GITHUB_ENV

          if [ -f 'customshell.sh' ]; then
            echo "customshell.sh"
            cat customshell.sh
          fi

#      - name: Create Issues comment
#        if: steps.info.outputs.issues == 'true' && steps.info.outputs.iscustom == 'false'
#        uses: actions-cool/issues-helper@v3
#        with:
#          actions: 'create-comment'
#          token: ${{ secrets.GITHUB_TOKEN }}
#          issue-number: ${{ env.issuenumber }}
#          body: |
#            ${{ env.issueauth }} 您好.
#            您自定义 Redpill 所填写的信息无法解析, 请参考模板并请重新发起定制。
#            error info: ${{ steps.info.outputs.errinfo }}
#            >
#            ----
#            Hi ${{ env.issueauth }}.
#            The information filled in by your customized Redpill cannot be parsed. Please refer to the template and restart customization.
#            error info: ${{ steps.info.outputs.errinfo }}
#            >
#          emoji: confused

#      - name: Create Config File
#        if: steps.info.outputs.iscustom == 'true'
#        uses: jannekem/run-python-script-action@v1.2
#        with:
#          script: |
#            import os, json
#
#            if __name__ == '__main__':
#                config = {
#                    "extra_cmdline": {
#                        "pid": "0x0001",
#                        "vid": "0x46f4",
#                        "sn": "2150SQRW1ZAHH",
#                        "mac1": "001132FA6CD3"
#                    },
#                    "synoinfo": {
#                        "internalportcfg": "0xffff",
#                        "maxlanport": "7"
#                    },
#                    "ramdisk_copy": {}
#                }
#
#                dat = []
#                if '${{ steps.info.outputs.sn }}' == '' or '${{ steps.info.outputs.mac }}' == '':
#                    try:
#                        import wget
#                    except ModuleNotFoundError:
#                        os.system('pip3 install wget')
#                        import wget
#                    res = wget.download('https://raw.githubusercontent.com/pocopico/tinycore-redpill/main/serialnumbergen.sh', out='serialnumbergen.sh')
#                    os.system('sed -i "s|DS3622xsp|DS3622xs+|g" serialnumbergen.sh')
#                    os.system('sed -i "s|echo.*\$(generateMacAddress)|echo \$(generateMacAddress)|g" serialnumbergen.sh')
#                    os.system('sed -i "s|echo.*\$(generateSerial \$1)|echo \$(generateSerial \$1)|g" serialnumbergen.sh')
#                    dat = os.popen('bash ./serialnumbergen.sh ${{ steps.info.outputs.platform }}').readlines()
#
#                if '${{ steps.info.outputs.sn }}' != '':
#                    config["extra_cmdline"]["sn"] = '${{ steps.info.outputs.sn }}'
#                elif len(dat) == 2:
#                    config["extra_cmdline"]["sn"] = dat[1].strip()
#
#                if '${{ steps.info.outputs.mac }}' != '':
#                    macs = '${{ steps.info.outputs.mac }}'.split(',')
#                    for index, item in enumerate(macs):
#                        config["extra_cmdline"]["mac{}".format(index+1)] = item.replace(':', '').upper()
#                    config["extra_cmdline"]["netif_num"] = len(macs)
#                elif len(dat) == 2:
#                    config["extra_cmdline"]["mac1"] = dat[0].strip().replace(':', '')
#                    config["extra_cmdline"]["mac2"] = hex(int(dat[0].strip().replace(':', ''), 16) + 1)[2:].rjust(12,'0').upper()
#                    config["extra_cmdline"]["netif_num"] = 2
#
#                if '${{ steps.info.outputs.map }}' != '':
#                    maps = '${{ steps.info.outputs.map }}'.split(',')
#                    if len(maps) == 2:
#                        config["extra_cmdline"]["SataPortMap"] = maps[0]
#                        config["extra_cmdline"]["DiskIdxMap"] = maps[1]
#
#                if '${{ steps.info.outputs.usb }}' != '':
#                    usbs = '${{ steps.info.outputs.usb }}'.split(',')
#                    if len(usbs) == 2:
#                        config["extra_cmdline"]["pid"] = usbs[0]
#                        config["extra_cmdline"]["vid"] = usbs[1]
#
#                print(json.dumps(config, indent=4))
#
#                with open('user_config.json', 'w', encoding="utf-8") as f:
#                    f.write(json.dumps(config, indent=4))


#      - name: Create Issues Comment
#        if: steps.info.outputs.issues == 'true' && steps.info.outputs.iscustom == 'true' && success()
#        uses: actions-cool/issues-helper@v3
#        with:
#          actions: 'create-comment'
#          token: ${{ secrets.GITHUB_TOKEN }}
#          issue-number: ${{ env.issuenumber }}
#          body: |
#            ${{ env.issueauth }} 您好.
#            您自定义的 Redpill 已构建完成。请前往下面的 URL 下载。
#            > ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
#            ----
#            Hi ${{ env.issueauth }}.
#            Your customized Redpill has been builded. Please click the URL below to download it.
#            > ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
#          emoji: hooray

#      - name: Close Issues
#        if: steps.info.outputs.issues == 'true' && steps.info.outputs.iscustom == 'true' && success()
#        uses: actions-cool/issues-helper@v3
#        with:
#          actions: 'close-issue'
#          token: ${{ secrets.GITHUB_TOKEN }}
#          issue-number: ${{ env.issuenumber }}

